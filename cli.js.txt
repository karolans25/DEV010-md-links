#!/usr/bin/env node
const { mdlinks } = require('./md-links');

const fnName = '/home/karolans/Documents/Github/Laboratoria/Bootcamp/Project_04/DEV010-md-links/cli.js';

const { yargs } = require('yargs')
  .version()
  .alias('v', 'version')
  .usage('Usage: mdlinks <./path/file/or/dir> [options]')
  // .command(['[dir]'], 'Read the links in the markdown files into the path', require('./md-links'))
  .example('mdlinks ./some/', 'Get the links of the markdown files into the `some` relative directory')
  .example('mdlinks ./some/ --validate', 'Get the links of the markdown files into the `some` relative directory and verify them')
  .example('mdlinks ./some/ --stats', 'Show the stadistics of the links into markdown files from `some` directory')
  .example('mdlinks ./some/ --validate --stats', 'Show the stadistics of the links into markdown files from `some` directory and check how many are broken')
  // .command(['docs'], 'Go to the documentation at https://zaiste.net', {}, (_) => open('https://zaiste.net'))
  .demandCommand(1, 'You need at least the path before moving on')
  .help('h')
  .alias('h', 'help')
  // .epilogue('for more information, find the documentation at https://zaiste.net')
  /*
  .command({
    command: 'mdlinks',
    describe: 'Find the links in md files',
    builder: {
      firstNumber: {
        describe: 'First Number',
        demandOption: false, // Required
        type: 'number',
      },
      secondNumber: {
        describe: 'Second Number',
        demandOption: false,
        type: 'number',
      },
    },

    // Function for your command
    handler(argv) {
      console.log('Result:', argv);
    // console.log('Result:', (argv.firstNumber+argv.secondNumber));
    },
  })
  */
  .argv;

// yargs.parse();

// console.log(yargs.argv);
// Define las opciones de línea de comandos
/*
const options = yargs
  .usage('Use: $0 [path/of/the/file] --validate --stats')
  .option('validate', {
    describe: 'validate the urls',
    demandOption: false, // Opción requerida
    type: 'undefined', // Tipo de valor esperado
  })
  .option('stats', {
    describe: 'show the statistics',
    demandOption: false, // Opción requerida
    type: 'string', // Tipo de valor esperado
  })
  .help() // Agrega la opción --help para mostrar la ayuda
  .alias('help', 'h') // Alias para la opción de ayuda
  .argv;

// Funcionalidad de tu librería
console.log('Validate urls:', options.validate);
console.log('Opción 2:', options.opcion2);
console.log('Versión de la librería:', require('./package.json').version);

// const [, , ...args] = process.argv;
const args = process.argv.splice(1);

// const arg = args[0] ? args[0].split('').splice(1).join('') : '';

console.log(args);
/*
if (args.length === 0) {
  console.log('Write a path after ');
} else if (args.length === 1) {
  mdlinks(args[0]).then((res) => {
    // console.table(res.map((item) => ({ path: args[0], href: item.href, text: item.text })));
    res.forEach((element) => {
      // const file = `${args[0]}${element.file.split(arg)[1]}`;
      console.log('%s\t%s\t%s', args[0], element.href, element.text.substr(0, 49));
    });
  }).catch((err) => console.error(err.message));
} else if (args[1] === '--validate' && args.length === 2) {
  mdlinks(args[0], true).then((res) => {
    res.forEach((element) => {
      // const file = `${args[0]}${element.file.split(arg)[1]}`;
      if (element.ok === 'ok') {
        // console.log('%s\t%s\t%s', file, element.href, element.text);
        console.log('%s\t%s\t%s\t%s', args[0], element.href, `${element.ok} ${element.status}`, element.text.substr(0, 49));
      } else {
        console.log('%s\t%s\t%s\t%s', args[0], element.href, `${element.ok} ${element.status}`, element.text.substr(0, 49));
      }
    });
  }).catch((err) => console.error(err.message));
} else if (args[1] === '--stats') {
  mdlinks(args[0]).then((res) => {
    console.log('\nTotal: ', res.length);
    const links = [];
    res.forEach((element) => {
      if (!links.includes(element.href)) {
        links.push(element.href);
      }
    });
    console.log('Unique: ', links.length, '\n');
  }).catch((err) => console.error(err.message));
} else {
  let broken = 0;
  mdlinks(args[0], true).then((res) => {
    console.log('\nTotal: ', res.length);
    const links = [];
    res.forEach((element) => {
      if (!links.includes(element.href)) {
        links.push(element.href);
      }
      if (element.ok === 'failed') {
        broken += 1;
      }
    });
    console.log('Unique: ', links.length);
    console.log('Broken: ', broken, '\n');
  }).catch((err) => console.error(err.message));
}
*/

const path = require('path');
const fsPromises = require('fs/promises');
const { mdlinks } = require('../md-links');

describe('mdLinks', () => {
  it('should be a function', () => {
    expect(typeof mdlinks).toBe('function');
  });

  it('should reject with an invalid type of path or empty string', async () => {
    await expect(mdlinks()).rejects.toThrow('The path is invalid');
    await expect(mdlinks(null)).rejects.toThrow('The path is invalid');
    await expect(mdlinks(undefined)).rejects.toThrow('The path is invalid');
    await expect(mdlinks('')).rejects.toThrow('The path is invalid');
    await expect(mdlinks(2)).rejects.toThrow('The path is invalid');
    await expect(mdlinks([])).rejects.toThrow('The path is invalid');
    await expect(mdlinks({}, null, undefined)).rejects.toThrow('The path is invalid');
  });

  it('should reject with an abs. path that doesn\'t exist on pc', async () => {
    jest.spyOn(path, 'resolve').mockImplementation((...args) => '/mocked/absolute/path');
    const mockResponse = jest.fn().mockRejectedValue({ message: 'reject' });
    jest.spyOn(fsPromises, 'access').mockResolvedValue(mockResponse);
    await expect(mdlinks('./source')).rejects.toThrow('No such file or directory');
  });

  it('should reject the promise if the file doesn\'t exist', () => {
    const file = '../some/example.md';
    mdlinks(file).then((res) => {
      expect(fsPromises.access).toHaveBeenCalledWith(file, fsPromises.constants.F_OK);
      expect(fsPromises.readFile).toHaveBeenCalledWith('../some/example.md', 'utf8');
      expect(res).toBe('Mocked file contents');
    });
  });

  it('should reject the promise if the file doesn\'t have an extension', async () => {
    fsPromises.existsSync = jest.fn().mockReturnValue(true);
    path.resolve = jest.fn().mockReturnValue('/absolute/path/file/example');
    // jest.mock('split');
    // const mockSplit = jest.fn().mockReturnValue(['/absolute/path/file/example']);
    // const originalSplit = String.prototype.split;
    // String.prototype.split = mockSplit;

    // Call the function and assert the result
    // expect(splitString('Hello World')).toEqual(['Hello', 'World']);

    // Verify that the split function was called with the correct arguments
    // expect(mockSplit).toHaveBeenCalledWith(' ');

    // Restore the original split function
    // String.prototype.split = originalSplit;
    await expect(mdlinks('path/example')).rejects.toThrow('No such file or directory');
  });

  it('should reject the promise if the file ext. is not a markDown ext.', async () => {
    path.resolve = jest.fn().mockReturnValue('/absolute/path/file/example.txt');
    await expect(mdlinks('path/example')).rejects.toThrow('No such file or directory');
  });

  it('should resolve with an abs. path that exists on pc', async () => {
    jest.spyOn(path, 'resolve').mockImplementation(() => '/mocked/absolute/path');
    // const mockResponse = jest.fn().mockResolvedValue({message: 'resolve'});
    // jest.spyOn(fsPromises, 'access').mockResolvedValue(mockResponse);
    await expect(mdlinks('./some/example.md')).resolves.toStrictEqual('./some/example.md');
  });

  // it.skip('should reject the promise if the file wasn\'t read', () => {
  //   path.resolve = jest.fn().mockReturnValue('/absolute/path/file/example.md');
  //   fs.readFile = jest.fn((path, callback) => {
  //     if (path === '/another/file.md') {
  //       callback(null, Buffer.from('Contenido del archivo'));
  //     } else {
  //       callback(new Error('No se pudo leer el archivo'));
  //     }
  //   });
  //   expect(mdlinks('path/example')).rejects.toThrow('No se pudo leer el archivo');
  // });

  // it.skip('should reject the promise if the file wasn\'t read', () => {
  //   path.resolve = jest.fn().mockReturnValue('/absolute/path/file/example.md');
  //   fs.readFile = jest.fn((path, callback) => {
  //     if (path === '/another/file.md') {
  //       callback(null, Buffer.from('Contenido del archivo'));
  //     } else {
  //       callback(new Error('No se pudo leer el archivo'));
  //     }
  //   });
  //   it('should reject the promise if the file wasn\'t read', () => {
  //     path.resolve = jest.fn().mockReturnValue('/absolute/path/file/example.md');
  //     fs.readFile = jest.fn((path, callback) => {
  //       if (path === '/another/file.md') {
  //         callback(null, Buffer.from('Contenido del archivo'));
  //       } else {
  //         callback(new Error('No se pudo leer el archivo'));
  //       }
  //     });
  //     expect(mdlinks('path/example')).rejects.toThrow('No se pudo leer el archivo');
  //   });

  //   expect(mdlinks('path/example')).rejects.toThrow('No se pudo leer el archivo');
  // });

  // it('should resolve an array with 3 links for a file .md with three links', () => {
  //   // FIX me
  //   return mdLinks('miArchivo.md').then((result) => {
  //     // expect...;
  //   });
  // });
});

const DATA_RESULT = '[{"file":"/home/karolans/Documents/Github/Laboratoria/Bootcamp/Project_04/DEV010-md-links/some/example1.md","href":"https://es.wikipedia.org/wiki/Markdown","line":4,"text":"Markdown"},{"file":"/home/karolans/Documents/Github/Laboratoria/Bootcamp/Project_04/DEV010-md-links/some/example1.md","href":"https://nodejs.org/","line":13,"text":"Node.js"}]';

describe.skip('mdlinks with assertions', () => {
  test('should be a function', () => {
    expect(typeof mdlinks).toBe('function');
  });

  test('should reject with an invalid type of path, empty string  or without any argument', () => {
    expect(mdlinks()).rejects.toThrow('The path is invalid');
    expect(mdlinks(null)).rejects.toThrow('The path is invalid');
    expect(mdlinks(undefined)).rejects.toThrow('The path is invalid');
    expect(mdlinks('')).rejects.toThrow('The path is invalid');
    expect(mdlinks(2)).rejects.toThrow('The path is invalid');
    expect(mdlinks([])).rejects.toThrow('The path is invalid');
    expect(mdlinks({}, null, undefined, '')).rejects.toThrow('The path is invalid');
  });

  test('should reject with a TypeError when file is not a valid string', () => {
    expect.assertions(1);
    return expect(mdlinks()).rejects.toThrow(TypeError);
  });

  test('should reject with an Error when file doesn\'t have an extension', () => {
    expect.assertions(1);
    return expect(mdlinks('./some/example')).rejects.toThrow(Error);
  });

  test('should reject with an Error when file has an invalid path', () => {
    expect.assertions(1);
    return expect(mdlinks('./some/')).rejects.toThrow(Error);
  });

  test('should reject with an Error when file is not a markdown file', () => {
    expect.assertions(1);
    return expect(mdlinks('./some/example.js')).rejects.toThrow(Error);
  });

  test('should resolve with the file data when file is valid without links', () => {
    expect.assertions(1);
    return expect(mdlinks('./some/example.md')).resolves.toStrictEqual([]);
  });

  test('should resolve with the file data when file is valid with some links', () => {
    expect.assertions(1);
    return expect(mdlinks('./some/example1.md')).resolves.toStrictEqual(JSON.parse(DATA_RESULT));
  });
});
